{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        console.log('API Error:', {\n          url: request.url,\n          method: request.method,\n          status: err.status,\n          error: err.error,\n          message: err.message\n        });\n        if ([401, 403].includes(err.status) && this.accountService.accountValue) {\n          // auto logout if 401 or 403 response returned from api\n          this.accountService.logout();\n        }\n        // Extract the error message from the response\n        let errorMessage = 'An unknown error occurred';\n        if (err.error) {\n          // Try to get the error message from various possible formats\n          if (typeof err.error === 'string') {\n            errorMessage = err.error;\n          } else if (err.error.message) {\n            errorMessage = err.error.message;\n          } else if (err.error.error) {\n            errorMessage = err.error.error;\n          } else if (err.statusText) {\n            errorMessage = err.statusText;\n          }\n        }\n        console.error('Processed Error:', errorMessage);\n        return throwError(errorMessage);\n      }));\n    }\n    static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
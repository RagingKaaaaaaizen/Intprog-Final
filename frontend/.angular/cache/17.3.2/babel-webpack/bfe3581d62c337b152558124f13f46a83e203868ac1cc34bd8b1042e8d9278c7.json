{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { map, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./alert.service\";\nconst baseUrl = `${environment.apiUrl}/employees`;\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http, alertService) {\n      this.http = http;\n      this.alertService = alertService;\n      this.employeeSubject = new BehaviorSubject(null);\n      this.employee = this.employeeSubject.asObservable();\n    }\n    handleError(error) {\n      let errorMessage = 'An error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Server-side error\n        if (error.status === 400) {\n          if (error.error?.message?.includes('email')) {\n            errorMessage = 'This email is already associated with an employee';\n          } else if (error.error?.message?.includes('employeeId')) {\n            errorMessage = 'This Employee ID is already in use';\n          } else if (error.error?.message?.includes('user')) {\n            errorMessage = 'This user already has an employee record';\n          } else {\n            errorMessage = error.error?.message || 'Invalid data provided';\n          }\n        } else if (error.status === 401) {\n          errorMessage = 'Please log in again';\n        } else if (error.status === 403) {\n          errorMessage = 'You do not have permission to perform this action';\n        } else if (error.status === 404) {\n          errorMessage = 'Employee not found';\n        } else if (error.status === 409) {\n          errorMessage = 'This record already exists';\n        }\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    create(params) {\n      return this.http.post(baseUrl, params).pipe(map(employee => {\n        this.employeeSubject.next(employee);\n        return employee;\n      }), catchError(this.handleError.bind(this)));\n    }\n    getAll() {\n      return this.http.get(baseUrl).pipe(catchError(this.handleError.bind(this)));\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`).pipe(catchError(this.handleError.bind(this)));\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(employee => {\n        this.employeeSubject.next(employee);\n        return employee;\n      }), catchError(this.handleError.bind(this)));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(catchError(this.handleError.bind(this)));\n    }\n    transferDepartment(employeeId, newDepartmentId) {\n      console.log('Transfer request:', {\n        employeeId,\n        newDepartmentId\n      });\n      // Create a simple update object with just the department ID\n      const updateData = {\n        departmentId: newDepartmentId\n      };\n      console.log('Update data:', updateData);\n      return this.http.patch(`${baseUrl}/${employeeId}`, updateData).pipe(map(employee => {\n        console.log('Transfer successful:', employee);\n        this.employeeSubject.next(employee);\n        this.alertService.success('Employee successfully transferred to new department', {\n          keepAfterRouteChange: true\n        });\n        return employee;\n      }), catchError(this.handleError.bind(this)));\n    }\n    static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
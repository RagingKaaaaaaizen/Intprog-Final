{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { map, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/employees`;\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http) {\n      this.http = http;\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    getAll() {\n      return this.http.get(baseUrl).pipe(map(employees => {\n        console.log('Raw employees data:', employees); // Debug log\n        return employees;\n      }));\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params);\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`);\n    }\n    transferDepartment(employeeId, newDepartmentId) {\n      // First get the current employee data\n      return this.getById(employeeId).pipe(map(employee => {\n        if (!employee) {\n          throw new Error('Employee not found');\n        }\n        // Create update object with all required fields\n        const updateData = {\n          id: employee.id,\n          employeeId: employee.employeeId,\n          position: employee.position,\n          userId: employee.userId,\n          departmentId: newDepartmentId,\n          hireDate: employee.hireDate,\n          isActive: employee.isActive\n        };\n        // Return the update request\n        return this.update(employeeId, updateData);\n      }), catchError(error => {\n        console.error('Transfer error:', error);\n        throw error;\n      }));\n    }\n    static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
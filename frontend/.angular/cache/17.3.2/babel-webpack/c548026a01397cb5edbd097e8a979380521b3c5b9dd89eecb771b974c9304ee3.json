{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { map, finalize, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/employees`;\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http) {\n      this.http = http;\n      this.employeeSubject = new BehaviorSubject(null);\n      this.employee = this.employeeSubject.asObservable();\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    create(params) {\n      return this.http.post(baseUrl, params).pipe(map(employee => {\n        if (!employee) {\n          throw new Error('No employee data received');\n        }\n        this.employeeSubject.next(employee);\n        return employee;\n      }), catchError(error => {\n        console.error('Create error:', error);\n        return throwError(() => error);\n      }));\n    }\n    getAll() {\n      return this.http.get(baseUrl).pipe(map(employees => {\n        if (!employees) {\n          return [];\n        }\n        console.log('Raw employees data:', employees);\n        return employees;\n      }), catchError(error => {\n        console.error('Get all error:', error);\n        return throwError(() => error);\n      }));\n    }\n    getById(id) {\n      if (!id) {\n        return throwError(() => new Error('Employee ID is required'));\n      }\n      return this.http.get(`${baseUrl}/${id}`).pipe(map(employee => {\n        if (!employee) {\n          throw new Error('Employee not found');\n        }\n        this.employeeSubject.next(employee);\n        return employee;\n      }), catchError(error => {\n        console.error('Get by ID error:', error);\n        this.employeeSubject.next(null);\n        return throwError(() => error);\n      }));\n    }\n    update(id, params) {\n      if (!id) {\n        return throwError(() => new Error('Employee ID is required'));\n      }\n      return this.http.patch(`${baseUrl}/${id}`, params).pipe(map(employee => {\n        if (!employee) {\n          throw new Error('No employee data received after update');\n        }\n        this.employeeSubject.next(employee);\n        return employee;\n      }), catchError(error => {\n        console.error('Update error details:', error);\n        if (error.status === 404) {\n          return throwError(() => new Error('Employee not found'));\n        } else if (error.status === 400) {\n          return throwError(() => new Error('Invalid update data'));\n        } else {\n          return throwError(() => new Error(error.error?.message || 'Failed to update employee. Please try again.'));\n        }\n      }));\n    }\n    delete(id) {\n      if (!id) {\n        return throwError(() => new Error('Employee ID is required'));\n      }\n      return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {\n        if (this.employeeValue?.id === id) {\n          this.employeeSubject.next(null);\n        }\n      }), catchError(error => {\n        console.error('Delete error:', error);\n        return throwError(() => error);\n      }));\n    }\n    transferDepartment(employeeId, newDepartmentId) {\n      if (!employeeId || !newDepartmentId) {\n        return throwError(() => new Error('Employee ID and Department ID are required'));\n      }\n      console.log('Transfer request:', {\n        employeeId,\n        newDepartmentId\n      });\n      const updateData = {\n        departmentId: newDepartmentId\n      };\n      console.log('Update data:', updateData);\n      return this.http.patch(`${baseUrl}/${employeeId}`, updateData).pipe(map(employee => {\n        if (!employee) {\n          throw new Error('No employee data received after transfer');\n        }\n        this.employeeSubject.next(employee);\n        return employee;\n      }), catchError(error => {\n        console.error('Transfer error details:', error);\n        if (error.status === 404) {\n          return throwError(() => new Error('Employee not found'));\n        } else if (error.status === 400) {\n          return throwError(() => new Error('Invalid department ID'));\n        } else {\n          console.error('Full error object:', error);\n          return throwError(() => new Error(error.error?.message || 'Failed to transfer employee. Please try again.'));\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
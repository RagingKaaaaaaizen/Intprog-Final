{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { map, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/employees`;\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http) {\n      this.http = http;\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    getAll() {\n      return this.http.get(baseUrl).pipe(map(employees => {\n        console.log('Raw employees data:', employees); // Debug log\n        return employees;\n      }));\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params);\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`);\n    }\n    transferDepartment(employeeId, newDepartmentId) {\n      console.log('Transfer request:', {\n        employeeId,\n        newDepartmentId\n      });\n      // Create a simple update object with just the department ID\n      const updateData = {\n        departmentId: newDepartmentId\n      };\n      console.log('Update data:', updateData);\n      return this.http.patch(`${baseUrl}/${employeeId}`, updateData).pipe(catchError(error => {\n        console.error('Transfer error details:', error);\n        if (error.status === 404) {\n          throw new Error('Employee not found');\n        } else if (error.status === 400) {\n          throw new Error('Invalid department ID');\n        } else {\n          console.error('Full error object:', error);\n          throw new Error(error.error?.message || 'Failed to transfer employee. Please try again.');\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}